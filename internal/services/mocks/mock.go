// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	image "image"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockChartographerServicer is a mock of ChartographerServicer interface.
type MockChartographerServicer struct {
	ctrl     *gomock.Controller
	recorder *MockChartographerServicerMockRecorder
}

// MockChartographerServicerMockRecorder is the mock recorder for MockChartographerServicer.
type MockChartographerServicerMockRecorder struct {
	mock *MockChartographerServicer
}

// NewMockChartographerServicer creates a new mock instance.
func NewMockChartographerServicer(ctrl *gomock.Controller) *MockChartographerServicer {
	mock := &MockChartographerServicer{ctrl: ctrl}
	mock.recorder = &MockChartographerServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChartographerServicer) EXPECT() *MockChartographerServicerMockRecorder {
	return m.recorder
}

// CreateBMP mocks base method.
func (m *MockChartographerServicer) CreateBMP(width, height int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBMP", width, height)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBMP indicates an expected call of CreateBMP.
func (mr *MockChartographerServicerMockRecorder) CreateBMP(width, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBMP", reflect.TypeOf((*MockChartographerServicer)(nil).CreateBMP), width, height)
}

// DeleteBMP mocks base method.
func (m *MockChartographerServicer) DeleteBMP(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBMP", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBMP indicates an expected call of DeleteBMP.
func (mr *MockChartographerServicerMockRecorder) DeleteBMP(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBMP", reflect.TypeOf((*MockChartographerServicer)(nil).DeleteBMP), id)
}

// GetPartBMP mocks base method.
func (m *MockChartographerServicer) GetPartBMP(id, xPosition, yPosition, width, height int) (image.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartBMP", id, xPosition, yPosition, width, height)
	ret0, _ := ret[0].(image.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartBMP indicates an expected call of GetPartBMP.
func (mr *MockChartographerServicerMockRecorder) GetPartBMP(id, xPosition, yPosition, width, height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartBMP", reflect.TypeOf((*MockChartographerServicer)(nil).GetPartBMP), id, xPosition, yPosition, width, height)
}

// UpdateBMP mocks base method.
func (m *MockChartographerServicer) UpdateBMP(id, xPosition, yPosition, width, height int, receivedImage []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBMP", id, xPosition, yPosition, width, height, receivedImage)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBMP indicates an expected call of UpdateBMP.
func (mr *MockChartographerServicerMockRecorder) UpdateBMP(id, xPosition, yPosition, width, height, receivedImage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBMP", reflect.TypeOf((*MockChartographerServicer)(nil).UpdateBMP), id, xPosition, yPosition, width, height, receivedImage)
}
